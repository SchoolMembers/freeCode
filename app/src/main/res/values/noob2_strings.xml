<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="noob2_page1_title">객체 이해하기</string>
    <string name="noob2_page1_des1">
        ! 메모리 (Memory)
        \n\n컴퓨터가 데이터를 저장하는 공간.
        \n\n\n! 객체 (Object)
        \n\n파이썬에서 사용하는 모든 데이터의 실제 모습.
        \n리스트, 숫자, 문자 등 파이썬의 모든 것이 객체예요.
        \n\n\n쉽게 비유하자면, 객체는 1, 3, \"문자열\", 함수 등 모든 요소들을 말하며 메모리는 객체를 담는 상자예요.
        \n\n만약 a = 1 라는 코드가 있다면, 1이라는 숫자 객체는 메모리(상자)의 어딘가에 저장되고, 변수 a는 객체 1의 메모리 주소(상자 위치)를 참조(기억) 해요.

        \n\n\nTip💡 그림의 각 부분을 클릭해 보세요!
    </string>
    <string name="noob2_page1_des2">
        초급2 챕터의 후반부에 이 페이지와 관련된 내용이 나오니 꼭 기억해두세요!
    </string>
    <string name="noob2_page1_des3">
        참조(reference)란?
    </string>
    <string name="noob2_page1_des4">
        변수가 데이터를 직접 저장하는 대신, 메모리 어딘가에 저장된 객체를 가리킨다는 뜻.
        \n\n예시: 변수 a는 객체 1의 메모리 주소를 가리키고 있다.
    </string>
    <string name="noob2_page1_image1">
        객체가 저장될 수 있는 메모리 공간
    </string>
    <string name="noob2_page1_image2">
        숫자 1 객체가 메모리에 생성
    </string>
    <string name="noob2_page1_image3">
        변수 a가 메모리 주소 1234를 참조 중
    </string>
    <string name="noob2_page1_image4">
        메모리 주소를 저장하는 변수 a 선언
    </string>

    <string name="noob2_page2_title">자료형 - tuple</string>
    <string name="noob2_page2_des1">
        튜플(tuple)은 리스트와 비슷하지만 수정을 할 수 없다는 점에서 달라요!
        \n\n튜플은 한 번 생성되면 그 값을 절대 바꿀 수 없어요.
        \n\n수정을 할 수 없어서 리스트보다 불편하다고 생각할 수 있지만,
        안전성이 중요한 데이터를 저장할 때 주로 사용해요.
        \n\n예를 들어, [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"] 같은 요일 리스트가 있다면, 실수로 요일 값을 변경할 위험이 있어요.
        \n\n바뀌면 안될 데이터가 변경될 위험을 방지하기 위해선, 데이터를 튜플로 선언하는 것이 좋아요!
        \n\n튜플로 선언하면 값이 바뀔 일이 없으니 데이터를 안전하게 다룰 수 있기 때문이에요.

        \n\n\n&lt; 다양한 선언 방법 &gt;
    </string>
    <string name="noob2_page2_des2">
        #비어있는 튜플 생성
        \nt1 = ()
        \n\n#요소가 하나인 튜플 생성
        \nt2 = (1, )
        \n\n#요소가 두 개 이상인 튜플 생성
        \nt3 = (1, 2, 3)
        \nt4 = 1, 2, 3
        \n\n#중첩 튜플
        \nt5 = (\'a\', \'b\', (\'ab\', \'cd\'))
        \n\n\n#tuple() 내장 함수
        \n\nt6 = tuple()
        \n#빈 튜플 생성
        \n\nli = [1, 2, 3]
        \nt7 = tuple(li)
        \n#리스트를 튜플로 변환
        \n#결과: (1, 2, 3)
        \n\nt8 = tuple(\"hi\")
        \n#문자열을 튜플로 변환
        \n#결과: (\'h\', \'i\')

    </string>
    <string name="noob2_page2_des3">
        t2로 선언된 튜플을 보면, 왜 (1, ) 이런 형태로 값을 선언했나 궁금하실 거예요.
        \n\n만약 t2 = 1 또는 t2 = (1)로 선언하면, 파이썬은 이를 정수형(int)으로 받아들여요.
        \n\n그렇기에 튜플로 인식되기 위해선 반드시 쉼표(,)를 붙여서 변수명 = (1, ) 형태로 선언해 주어야 해요.

        \n\n\n튜플을 다루는 방식은 리스트와 유사해요!
    </string>
    <string name="noob2_page2_des4">
        t1 = (1, 2, \'three\', \'four\')
        \nt2 = (3, 4)
        \n\n#인덱싱
        \nt1[0]
        \n#결과: 1
        \n\n#슬라이싱
        \nt1[2:]
        \n#결과: (\'three\', \'four\')
        \n\n#튜플 더하기
        \nt3 = t1 + t2
        \nprint(t3)
        \n#결과: (1, 2, \'three\', \'four\', 3, 4)
        \n\n#튜플 곱하기
        \nt3 = t2 * 2
        \nprint(t3)
        \n#결과: (3, 4, 3, 4)
        \n\n#튜플 길이
        \nlen(t1)
        \n#결과: 4
    </string>
    <string name="noob2_page2_des5">
        \n\n🚨 주의!
        \n\n튜플 더하기, 곱하기의 경우엔 튜플의 값을 변경하는 것이 아닌, t3(으)로 새로운 튜플을 생성하여 결과를 저장한 것이기 때문에 오류가 생기지 않습니다!
    </string>

    <string name="quiz_noob2_question1">
        초급1 - 퀴즈1

        \n\n아래의 코드에서 에러(오류)가 발생하는 라인을 모두 선택하세요!
    </string>
    <string name="quiz_noob2_question1_ex">
        t = 1, 2, 3, 4
        \n\nprint(t[4]) ----line 1
        \nt.append(5) ----line 2
        \nprint(type(t)) ----line 3
        \nt2 = t + (5, 6) ----line 4
        \nt2[0] = 10 ----line 5
    </string>
    <!-- 정답: 1, 2, 5-->
    <string name="quiz_noob2_question1_answer1">line 1</string>
    <string name="quiz_noob2_question1_answer2">line 2</string>
    <string name="quiz_noob2_question1_answer3">line 3</string>
    <string name="quiz_noob2_question1_answer4">line 4</string>
    <string name="quiz_noob2_question1_answer5">line 5</string>

    <string name="noob2_page4_title">자료형 - dictionary</string>
    <string name="noob2_page4_des1">
        딕셔너리(dictionary)는 사전이라는 뜻이에요!
        \n\n예를 들어, 인터넷 사전에 연필이라고 검색하면 연필의 뜻이 나오듯이 파이썬의 딕셔너리도 키(단어)를 검색해서 값(뜻)을 불러오는 방식이라고 할 수 있어요!
    </string>
    <string name="noob2_page4_des2">변수명 = {key1:value1, key2:value2}</string>
    <string name="noob2_page4_des3">
        딕셔너리 각각의 요소는 key:value 형태로 이루어져 있으며, 요소들을 { } 내부에 선언해야 해요.
        \n\n선언 방식은 다양해요. 아래의 표와 코드를 참고해 주세요!
    </string>
    <string name="noob2_page4_table_title">&lt; 딕셔너리 키와 값 사용 가능 여부 &gt;</string>
    <string name="noob2_page4_table_key">키로 사용 가능</string>
    <string name="noob2_page4_table_value">값으로 사용 가능</string>
    <string name="noob2_page4_table_int">int</string>
    <string name="noob2_page4_table_float">float</string>
    <string name="noob2_page4_table_str">str</string>
    <string name="noob2_page4_table_list">list</string>
    <string name="noob2_page4_table_tuple">tuple</string>
    <string name="noob2_page4_table_dict">dict</string>
    <string name="noob2_page4_table_bool">bool</string>
    <string name="noob2_page4_table_set">set</string>
    <string name="noob2_page4_des4">
        표를 보면 값으로는 모든 타입을 사용할 수 있지만, 키는 제한되어 있어요.
        \n\n딕셔너리의 키는 중복될 수 없으며 변경할 수도 없기 때문에 불변 객체만 키로 선언할 수 있고, 가변 객체는 값으로만 사용할 수 있기 때문이에요.
        \n\n주의할 점은, 키로 선언되는 자료형의 내부 요소도 불변이어야 키로 사용 가능해요!
        \n예시: 튜플 내부의 값이 리스트라면(t = ([1,2], 3)) 키로 사용할 수 없음
        \n\n표의 자료형 부분에 있는 bool, set 타입은 뒷부분에서 배우게 돼요!
        \n\n! 참고1
        \n불변: 선언 후 변하지 않음
        \n가변: 선언 후 변경될 수 있음
        \n\n! 참고2
        \nstr(string), dict(dictionary), bool(boolean)
        \n\n\n&lt; 선언 및 값 불러오기 &gt;
    </string>
    <string name="noob2_page4_des5">
        a = {1: \'one\'}
        \nprint(a[1])
        \n#결과: one
        \n\nb = {1: \'a\', 2: \'b\', \'person\': [\'Kim\', \'Lee\']}
        \nprint(b[\'person\'][0])
        \n#결과: kim
    </string>
    <string name="noob2_page4_des6">
        코드를 보면 딕셔너리 a의 키는 int, 값은 str으로 선언되었어요.
        \n\n딕셔너리는 리스트처럼 값의 인덱스로 값을 불러오는 것이 아니라, 값을 불러올 때 해당 값에 대응하는 키를 사용하기 때문에 a[1]의 결과는 \'one\'이 돼요!
        \n\nb[\'person\'][0](은)는 딕셔너리 키 \'person\'의 값인 리스트 [\'Kim\', \'Lee\']의 인덱스 0번 값 \'Kim\'을 불러와요!
    </string>
</resources>